#include "PackNumber.h"
#include <iostream>
#include <cassert>
using namespace std;
// --------------------------------------------------------
//	PackNumberクラス（ソースファイル）
//	 指定されたサイズの配列を作成し、
//	 その配列に数値を保存していくクラス
// --------------------------------------------------------
///////////////////////////////////////////////////////////
//	コンストラクタ
//	 引数:
//		動的確保する配列のサイズ
//	 内容:
//		引数で渡された数値で配列を動的に確保する
///////////////////////////////////////////////////////////
PackNumber::PackNumber(int size) :
	SIZE(size)
{
	// 指定されたサイズが0以下の場合はエラーを出力をしてプログラムを終了する
	assert(SIZE > 0);

	// SIZE分の配列を確保
	nums_ = new int[SIZE];
	// 動的確保に失敗した場合、それ以降の処理を行わない
	if (nums_ == nullptr)
		return;

	// 動的確保した配列の全ての要素に初期値として0を代入
	for (int i = 0; i < SIZE; ++i)
	{
		nums_[i] = 0;
	}
}

///////////////////////////////////////////////////////////
//	デストラクタ
///////////////////////////////////////////////////////////
PackNumber::~PackNumber()
{
	delete[] nums_;
	nums_ = nullptr;
}

PackNumber::PackNumber(const PackNumber& other):
	SIZE(other.SIZE)
{
}

///////////////////////////////////////////////////////////
//	Set関数
//	 戻り値:
//		なし
//	 引数:
//		int i	  … 配列のインデックス
//		int value … 要素へ代入する値
//	 内容:
//		動的確保した配列「nums_」のi番目にvalue_を代入する
///////////////////////////////////////////////////////////
void PackNumber::Set(int i, int value)
{
	// 配列の範囲外にアクセスしようとした場合、
	// 何もせずに関数を終了する
	if (CheckIndex(i) == false)
		return;

	nums_[i] = value;
}

///////////////////////////////////////////////////////////
//	Get関数
//	 戻り値:
//		動的確保した配列「nums_」のi番目の要素
//	 引数:
//		int i	  … 配列のインデックス
//	 内容:
//		動的確保した配列「nums_」のi番目の要素を返す
///////////////////////////////////////////////////////////
int PackNumber::Get(int i)const
{
	// 配列の範囲外にアクセスしようとした場合、
	// 配列の最初の要素を返す
	if (CheckIndex(i) == false)
		return nums_[0];

	return nums_[i];
}

///////////////////////////////////////////////////////////
//	CheckIndex関数
//	 戻り値:
//		true  … 引数iが0以上SIZE未満（配列のインデックスとして正常）
//		false … 引数iが0未満SIZE以上（配列のインデックスとして不正）
//	 引数:
//		int i	  … 配列のインデックス
//	 内容:
//		引数iが動的確保した配列「nums_」のインデックスとして
//		正常かどうかを判断する
//		（配列オーバーフローのチェック）
///////////////////////////////////////////////////////////
bool PackNumber::CheckIndex(int i) const
{
	if (i < 0)
		return false;
	if (i >= SIZE)
		return false;

	return true;
}

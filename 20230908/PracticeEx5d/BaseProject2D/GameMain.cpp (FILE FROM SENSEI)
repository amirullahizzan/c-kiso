#include "WinMain.h"

// =====================================================
//	列挙体
//	決まった値しか入れることのできない変数
// =====================================================



// =====================================================
//	定数
//	最初から決まっていてあとから変えることができない変数
// =====================================================



// =====================================================
//	構造体
//	変数をひとまとめにして新しく変数を作る
// =====================================================
struct Reel
{
	int ghandles[8]		= { 0 }; // 絵柄（全部）
	int animation_frame = 0;	 // フレーム数
	int ghandle_index	= 0;	 // 現在の絵柄の番号
	bool is_stop		= true;	 // 止まっているかどうか
};

// =====================================================
//	グローバル変数
//	複数の関数で共通して使いたい変数はここに書く
// =====================================================
Reel reel1;


// =====================================================
//	関数プロトタイプ
//	関数の宣言のみ・定義は後で行う
// =====================================================
// リール: 初期化
void ReelInit(Reel& reel)
{
	// reel1.ghandles[0]〜reel1.ghandles[7]に
	// data/slot_img01.png〜data/slot_img08.pngの
	// 画像を読み込む
	for (int i = 0; i < 8; ++i)
	{
		char fname[128];
		sprintfDx(fname, "data/slot_img%02d.png", (i + 1));
		reel.ghandles[i] = LoadGraph(fname);
	}
	reel.animation_frame = 0;
	reel.ghandle_index = 0;
	reel.is_stop = true;
}
// リール: 描画処理
void ReelDraw(const Reel& reel)
{
	DrawGraph(0, WINDOW_H / 2 - IMG_SIZE / 2,
			  reel.ghandles[reel.ghandle_index],
			  TRUE);
}
// リール: 回転処理
void ReelRotation(Reel& reel)
{
	if (reel.is_stop == true)
		return;

	++reel.animation_frame;
	if (reel.animation_frame < 10)
		return;

	// 10フレームに1回、リールの画像を変える
	reel.animation_frame = 0;
	++reel.ghandle_index;
	reel.ghandle_index %= 8;
}
// リール: 終了処理
void ReelExit(Reel& reel)
{
	// 読み込んだ画像の破棄
	for (int i = 0; i < 8; ++i)
	{
		DeleteGraph(reel.ghandles[i]);
	}
}


// =====================================================
//		初期化
//	ゲーム開始直後に最初に1回だけ実行される関数
//	最初の値を変数に入れたいときに使う
// =====================================================
void GameInit()
{
	// リール1の初期化処理
	ReelInit(reel1);

}
// =====================================================
//		更新
//	ゲームが終了されるまで実行される関数
//	1秒間に約60回呼ばれる
//	1フレームで行う処理をここに書く
// =====================================================
void GameUpdate()
{
	// リール1の更新処理
	// リールの回転処理
	ReelRotation(reel1);
	if (IsKeyOn(KEY_INPUT_SPACE))
	{
		reel1.is_stop = false;
	}

	if (IsKeyOn(KEY_INPUT_A))
	{
		reel1.is_stop = true;
	}

}
// =====================================================
//		描画
//	ゲームが終了されるまで実行される関数
//	1秒間に約60回呼ばれる
//	GameUpdate関数が実行された後に実行される関数
// =====================================================
void GameDraw()
{
	// リール1の描画処理
	ReelDraw(reel1);

}
// =====================================================
//		終了
//	ゲームが終了する前に1回だけ実行される関数
//	何か最後に後片付けを行うときに使う
// =====================================================
void GameExit()
{
	// リール1の終了処理
	ReelExit(reel1);

}
